#!/bin/bash
# Simple management of null_blk devices, useful for zoned device testing
# Run 'nullb help' for how to use it
Version="0.1"

function print_help() {
	echo "Simple management of null_blk devices, useful for zoned device testing"
	echo "Version: $Version"
	echo ""
	echo "Commands:"
	echo ""
	echo "nullb setup [module options]"
	echo "- load required modules and mount configfs, optionally specify module options for null_blk.ko:"
	echo "  - nr_devices - number of pre-created device nodes (default: 0)"
	echo ""
	echo "  For more see 'modinfo null_blk', most apply to all new devices, you may want to tweak the"
	echo "  individual devices upon creation."
	echo ""
	echo "nullb create [-s sizeMB] [-z zonesizeMB] [-c zonecapacityMB]"
	echo "- create a new device with given sizes (in megabytes), allocating the first free index,"
	echo "  device is /dev/nullb\$index"
	echo "- optionally for ZNS set the capacity (zone capacity <= zone size, default is zone size)."
	echo ""
	echo "nullb ls"
	echo "nullb list"
	echo "- show table of created null_blk devices, size and zone sizes"
	echo ""
	echo "nullb rm NAME"
	echo "nullb delete NAME"
	echo "- delete existing null_blk device by name, must match the device node name"
	echo "  like 'nullb0'"
	exit 0
}

# Implemented commands:
#
# help
# create
# list
# delete
# setup

CMD="$1"
DEBUG=false

# Defaults
SIZE='2048'
ZONESIZE='256'
SYSFS='/sys/kernel/config/nullb'

function _error() {
	echo "ERROR: $@"
	exit 1
}

function _warn() {
	echo "WARNING: $@"
}

function _msg() {
	echo "INFO: $@"
}

function _dbg() {
	$DEBUG && echo "DEBUG: $@" > /dev/tty
}

function _check_setup() {
	if ! modinfo -n null_blk > /dev/null; then
		_error "module not compiled/loaded"
	fi
	if ! grep -q configfs /proc/filesystems; then
		_error "configfs not mounted"
	fi
	if ! grep -q zoned "$SYSFS/features"; then
		_warn "null_blk module does not support zoned devices"
	fi
}

function _check_cd() {
	if ! [ -d "$1" ]; then
		_error "$1 not accessible"
	fi
	cd "$1"
}

function _find_free_index() {
	_check_cd "$SYSFS"
	found=-1
	for index in `seq 0 1 100`; do
		_dbg "index $index"
		ok=true
		for dir in $(ls -df1 * 2>/dev/null); do
			if ! [ -d "$dir" ]; then
				continue
			fi
			_dbg "found $dir"
			idx=$(cat "$dir/index")
			if [ "$idx" = "$index" ]; then
				ok=false
				break
			fi
		done
		if $ok; then
			found=$index
			break
		fi
	done
	if [ "$found" = "-1" ]; then
		_error "no free index found"
	fi
	_dbg "first free index: $found"
	echo -n "$found"
}

function _parse_device_size() {
	local size="$SIZE"
	_dbg "parse size $@"
	while [ $# -gt 0 ]; do
		_dbg "ARG: $1"
		if [ "$1" = '-s' ]; then
			size="$2"
			if [ -z "$size" ]; then
				_error "-s requires size"
			fi
			shift
		fi
		shift
	done

	echo -en "$size"
}

function _parse_zone_size() {
	local zonesize="$ZONESIZE"
	_dbg "parse zone size $@"
	while [ $# -gt 0 ]; do
		_dbg "ARG: $1"
		if [ "$1" = '-z' ]; then
			zonesize="$2"
			if [ -z "$zonesize" ]; then
				_error "-z requires size"
			fi
			shift
		fi
		shift
	done

	echo -en "$zonesize"
}

function _parse_zone_capacity() {
	local zonecapacity="$ZONESIZE"
	_dbg "parse zone capacity $@"
	while [ $# -gt 0 ]; do
		_dbg "ARG: $1"
		if [ "$1" = '-c' ]; then
			zonecapacity="$2"
			if [ -z "$zonecapacity" ]; then
				_error "-c requires size"
			fi
			shift
		fi
		shift
	done

	echo -en "$zonecapacity"
}

# main()

if [ "$CMD" = 'help' ]; then
	print_help
	exit 0
fi

if [ "$CMD" = 'setup' ]; then
	declare -a options
	shift
	options=("nr_devices=0" "$@")
	_msg "setup module and mounts (module options: ${options[@]})"
	modprobe configfs
	modprobe null_blk "${options[@]}"
	_check_setup
fi

if [ "$CMD" = 'create' ]; then
	_check_setup
	index=$(_find_free_index)
	name="nullb$index"
	# size in MB
	size=$(_parse_device_size "$@")
	# size in MB
	zonesize=$(_parse_zone_size "$@")
	# size in MB
	zonecapacity=$(_parse_zone_capacity "$@")
	_msg "Create nullb$index"
	_check_cd "$SYSFS"
	if mkdir "$name"; then
		_check_cd "$name"
		echo "$size" > size
		echo 1 > zoned
		echo 1 > memory_backed
		echo "$zonesize" > zone_size
		if [ -f "zone_capacity" ]; then
			echo "$zonecapacity" > zone_capacity
		fi
		echo 1 > power
		node=$(cat "$SYSFS/$name/index")
		node="nullb${node}"
		_msg "name=$node"
		_msg "size=${size}M zone_size=${zonesize}M"
		# last printed line is the exact name for later use
		echo "/dev/$node"
	else
		_error "already exists"
	fi
fi

if [ "$CMD" = 'ls' -o "$CMD" = 'list' ]; then
	_msg "device nodes:"
	ls /dev/nullb* 2>/dev/null
	_msg "created devices:"
	_check_cd "$SYSFS"
	printf '%-2s  %-8s  %-16s  %11s  %11s  %13s  %-2s  %-8s
'	\
		"No"				\
		"Name"				\
		"Device"			\
		"Size"				\
		"Zone size"			\
		"Zone capacity"			\
		"On"				\
		"Mount"
	for dir in $(ls -df1 * 2>/dev/null); do
		[ -d "$dir" ] || continue
		DEV="/dev/nullb"$(cat "$dir/index")
		capacity=$(cat "$dir/zone_size")
		if [ -f "$dir/zone_capacity" ]; then
			capacity=$(cat "$dir/zone_capacity")
		fi
		printf '%2d  %-8s  %-16s  %10dM  %10dM  %12dM  %2d  %-8s
'	\
			$(cat "$dir/index")			\
			"$dir"					\
			"$DEV"					\
			$(cat "$dir/size")			\
			$(cat "$dir/zone_size")			\
			"$capacity"				\
			$(cat "$dir/power")			\
			$(findmnt -o TARGET --noheadings "$DEV")
	done
fi

if [ "$CMD" = 'rm' -o "$CMD" = 'delete' ]; then
	_check_cd "$SYSFS"
	name="$2"
	_dbg "deleting $name"
	if [ -d "$name" ]; then
		_msg "check mounts"
		mount | grep -- "$name"
		_msg "removing $name"
		rmdir -- "$SYSFS/$name"
	else
		_error "no such device name: $name"
	fi
fi
